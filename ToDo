=== 0.20

- Use array for output
- Option to include template source as comments
- Put all Jemplate code into a standalone script.
- Test INCLUDE_PATH

=== 0.19

+ Better Getopt::Long processing
+ Option to preserve template paths.
+ Support Jemplate objects. Jemplate->new({options})->process;
+ Allow multiple compilations to work together.
x Option to bundle Jemplate.js runtime

+ Test --runtime == share/Jemplate.js
+ Test --list
+ Test --start-tag and JEMPLATE_START_TAG etc
+ Test multiple compile files
+ Test DEBUG_UNDEF
+ Test subdir templates

+ Change list output
+ make manifest


=== This is a list of things for you to do. Feel free to do them or add to the
list.

+ Fix test harness output on IE. It currently shows up on one line.

- Write tests to make sure all the `process` API variations work (on all
  browsers. This has bit me already.

+ Implement the hash virtual methods
- Finish implementing the standard filters

+ Make foo.bar() compile to stash.get('foo', 0, 'bar', [])
+ Make sure stash calls some function in that case.

- Finish the following directives:
  - MACRO
  - TRY/CATCH/FINAL
  - THROW
  + DEFAULT
  - META
  - INSERT
  - FILTER
  - USE 

- Implement plugin support for javascript libraries.

- Port popular TT plugin modules

- Write a tutorial pod

+ TT supports stash localization within a template. Jemplate should do this.

=== Add Experimental Ajax/Json/Stash support

If a template says:

[% JSON foo.bar -> 'data/bar.json' %]

then access to foo.bar will trigger a synchronous call to the uri
'data/bar.json'. Even access to foo.bar.baz would trigger it before baz was
looked up in the result.

The idea is that this allows some client side templates to use serverside
logic. And conditionally at that.

Any subsequent calls to foo.bar.* should use the cached data.

It is likely that the stash should be localized. So that other templates
access to foo.bar did not use this.
